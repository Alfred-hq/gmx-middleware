type ClosePosition @entity(immutable: true) {
  id: String!
  account: String!
  link: PositionLink!

  key: String! # String32
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  averagePrice: BigInt! # uint256
  entryFundingRate: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type DecreasePosition @entity(immutable: true) {
  id: String!
  key: String! # String32
  link: PositionLink!

  account: String! # address
  collateralToken: String! # address
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  price: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type IncreasePosition @entity(immutable: true) {
  id: String!
  key: String! # String32
  link: PositionLink!

  account: String! # address
  collateralToken: String! # address
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  price: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type UpdatePosition @entity(immutable: true) {
  id: String!
  account: String!
  link: PositionLink!

  key: String! # String32
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  averagePrice: BigInt! # uint256
  entryFundingRate: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  markPrice: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type LiquidatePosition @entity(immutable: true) {
  id: String!
  key: String! # String32
  link: PositionLink!

  account: String! # address
  collateralToken: String! # address
  indexToken: String! # address
  isLong: Boolean! # bool
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  markPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Swap @entity(immutable: true) {
  id: String!
  account: String! # address
  tokenIn: String! # address
  tokenOut: String! # address
  amountIn: BigInt! # uint256
  amountOut: BigInt! # uint256
  amountOutAfterFees: BigInt! # uint256
  feeBasisPoints: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type ExecuteDecreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  receiver: String! # address
  acceptablePrice: BigInt! # uint256
  minOut: BigInt! # uint256
  executionFee: BigInt! # uint256
  blockGap: BigInt! # uint256
  timeGap: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type ExecuteIncreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  acceptablePrice: BigInt! # uint256
  executionFee: BigInt! # uint256
  blockGap: BigInt! # uint256
  timeGap: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type CreateDecreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  receiver: String! # address
  acceptablePrice: BigInt! # uint256
  minOut: BigInt! # uint256
  executionFee: BigInt! # uint256
  index: BigInt! # uint256
  queueIndex: BigInt! # uint256
  blockTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type CreateIncreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  acceptablePrice: BigInt! # uint256
  executionFee: BigInt! # uint256
  index: BigInt! # uint256
  queueIndex: BigInt! # uint256
  blockTime: BigInt! # uint256
  gasPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

# slots
type PositionSlot @entity {
  id: String!
  idCount: Int!
  link: PositionLink!

  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!

  size: BigInt!
  collateral: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  lastIncreasedTimestamp: BigInt!
  lastDecreasedTimestamp: BigInt!
  numberOfIncrease: BigInt!
  numberOfDecrease: BigInt!
  lastDecreasedPrice: BigInt!
}

type PositionSettled @entity(immutable: true) {
  id: String!
  idCount: Int!
  link: PositionLink!

  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!

  size: BigInt!
  collateral: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!

  settlePrice: BigInt!
  isLiquidated: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
  openTime: BigInt!
  closeTime: BigInt!
  numberOfIncrease: BigInt!
  numberOfDecrease: BigInt!
}

type PositionLink @entity(immutable: false) {
  id: String!

  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!

  # executeIncreaseList: [ExecuteIncreasePosition!] @derivedFrom(field: "link")
  # executeDecreaseList: [ExecuteDecreasePosition!] @derivedFrom(field: "link")

  increaseList: [IncreasePosition!] @derivedFrom(field: "link")
  decreaseList: [DecreasePosition!] @derivedFrom(field: "link")
  updateList: [UpdatePosition!] @derivedFrom(field: "link")
  closeList: [ClosePosition!] @derivedFrom(field: "link")

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!

  settlePrice: BigInt!
  isLiquidated: Boolean!
  size: BigInt!
  collateral: BigInt!
}
type CancelDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CancelIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  purchaseToken: String! # address
  purchaseTokenAmount: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CancelSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CreateDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CreateIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  purchaseToken: String! # address
  purchaseTokenAmount: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CreateSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type ExecuteDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  executionPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type ExecuteIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  purchaseToken: String! # address
  purchaseTokenAmount: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  executionPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type ExecuteSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  amountOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type Initialize @entity(immutable: true) {
  id: String!
  router: String! # address
  vault: String! # address
  weth: String! # address
  usdg: String! # address
  minExecutionFee: BigInt! # uint256
  minPurchaseTokenAmountUsd: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateGov @entity(immutable: true) {
  id: String!
  gov: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  isLong: Boolean! # bool
  sizeDelta: BigInt! # uint256
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateMinExecutionFee @entity(immutable: true) {
  id: String!
  minExecutionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateMinPurchaseTokenAmountUsd @entity(immutable: true) {
  id: String!
  minPurchaseTokenAmountUsd: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  ordexIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type Trades @entity(immutable: true) {
  id: String!
  link: PositionLink!
  key: String
  account: String!
  status: String
  collateralToken: String
  indexToken: String
  collateral: BigInt
  collateralDelta: BigInt
  size: BigInt
  sizeDelta: BigInt!
  positionSide: String
  fee: BigInt
  price: BigInt
  averagePrice: BigInt
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: String
  logIndex: BigInt
  entryFundingRate: BigInt
  reserveAmount: BigInt
  realisedPnl: BigInt
}

type TraderAnalytics @entity {
  id: String!
  account: String!
  cumulativeSize: BigInt!
  cumulativeFee: BigInt!
  cumulativeCollateral: BigInt!
  maxSize: BigInt!
  maxCollateral: BigInt!
  cumulativePnl: BigInt!
  openCount: BigInt!
  totalPositions: BigInt!
  increaseCount: BigInt!
  decreaseCount: BigInt!
  lastSettledPositionAt: BigInt!
  lastOpenPositionAt: BigInt!
  totalLiquidated: BigInt!
  winCountWithFee: BigInt!
  winCount: BigInt!
  loseCountWithFee: BigInt!
  loseCount: BigInt!
}

 type TraderAnalyticsDaily @entity {
  id: String!
  startTime: BigInt!
  account: String!
  cumulativeSize: BigInt!
  cumulativeFee: BigInt!
  cumulativeCollateral: BigInt!
  maxSize: BigInt!
  maxCollateral: BigInt!
  cumulativePnl: BigInt!
  openCount: BigInt!
  totalPositions: BigInt!
  increaseCount: BigInt!
  decreaseCount: BigInt!
  lastSettledPositionAt: BigInt!
  lastOpenPositionAt: BigInt!
  totalLiquidated: BigInt!
  winCountWithFee: BigInt!
  winCount: BigInt!
  loseCountWithFee: BigInt!
  loseCount: BigInt!
 }
 
 type EventLog @entity(immutable: true) {
  id: Bytes!
  msgSender: Bytes! # address
  eventName: String! # string
  eventNameHash: String! # string
  eventData_addressItems_items: [Bytes!]! # tuple[]
  eventData_addressItems_arrayItems: [Bytes!]! # tuple[]
  eventData_uintItems_items: [Bytes!]! # tuple[]
  eventData_uintItems_arrayItems: [Bytes!]! # tuple[]
  eventData_intItems_items: [Bytes!]! # tuple[]
  eventData_intItems_arrayItems: [Bytes!]! # tuple[]
  eventData_boolItems_items: [Bytes!]! # tuple[]
  eventData_boolItems_arrayItems: [Bytes!]! # tuple[]
  eventData_bytes32Items_items: [Bytes!]! # tuple[]
  eventData_bytes32Items_arrayItems: [Bytes!]! # tuple[]
  eventData_bytesItems_items: [Bytes!]! # tuple[]
  eventData_bytesItems_arrayItems: [Bytes!]! # tuple[]
  eventData_stringItems_items: [Bytes!]! # tuple[]
  eventData_stringItems_arrayItems: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EventLog1 @entity(immutable: true) {
  id: Bytes!
  msgSender: Bytes! # address
  eventName: String! # string
  eventNameHash: String! # string
  topic1: Bytes! # bytes32
  eventData_addressItems_items: [Bytes!]! # tuple[]
  eventData_addressItems_arrayItems: [Bytes!]! # tuple[]
  eventData_uintItems_items: [Bytes!]! # tuple[]
  eventData_uintItems_arrayItems: [Bytes!]! # tuple[]
  eventData_intItems_items: [Bytes!]! # tuple[]
  eventData_intItems_arrayItems: [Bytes!]! # tuple[]
  eventData_boolItems_items: [Bytes!]! # tuple[]
  eventData_boolItems_arrayItems: [Bytes!]! # tuple[]
  eventData_bytes32Items_items: [Bytes!]! # tuple[]
  eventData_bytes32Items_arrayItems: [Bytes!]! # tuple[]
  eventData_bytesItems_items: [Bytes!]! # tuple[]
  eventData_bytesItems_arrayItems: [Bytes!]! # tuple[]
  eventData_stringItems_items: [Bytes!]! # tuple[]
  eventData_stringItems_arrayItems: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EventLog2 @entity(immutable: true) {
  id: Bytes!
  msgSender: Bytes! # address
  eventName: String! # string
  eventNameHash: String! # string
  topic1: Bytes! # bytes32
  topic2: Bytes! # bytes32
  eventData_addressItems_items: [Bytes!]! # tuple[]
  eventData_addressItems_arrayItems: [Bytes!]! # tuple[]
  eventData_uintItems_items: [Bytes!]! # tuple[]
  eventData_uintItems_arrayItems: [Bytes!]! # tuple[]
  eventData_intItems_items: [Bytes!]! # tuple[]
  eventData_intItems_arrayItems: [Bytes!]! # tuple[]
  eventData_boolItems_items: [Bytes!]! # tuple[]
  eventData_boolItems_arrayItems: [Bytes!]! # tuple[]
  eventData_bytes32Items_items: [Bytes!]! # tuple[]
  eventData_bytes32Items_arrayItems: [Bytes!]! # tuple[]
  eventData_bytesItems_items: [Bytes!]! # tuple[]
  eventData_bytesItems_arrayItems: [Bytes!]! # tuple[]
  eventData_stringItems_items: [Bytes!]! # tuple[]
  eventData_stringItems_arrayItems: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IncreasePositionV2 @entity(immutable: true) {
  id: String!
  positionKey: String! #position key 
  orderKey: String #orderKey for v2
  account: String! # address
  indexToken: String! # address
  marketToekn: String! # address //new
  collateralToken: String! # address
  collateralInUsd: BigInt! # uint256 //collateral amount
  # minOut: BigInt! # uint256
  sizeDeltaInUsd: BigInt! # uint256
  sizeDeltaInToken: BigInt! # uint256
  sizeInUsd:BigInt!
  sizeInToken:BigInt!
  isLong: Boolean! # bool
  # acceptablePrice: BigInt! # uint256
  executionPrice: BigInt! # uint256 //new
  indexTokenPriceMax: BigInt! #new
  indexTokenPriceMin: BigInt! #new
  collateralTokenPriceMin: BigInt! #new
  collateralTokenPriceMax: BigInt! #new
  # executionFee: BigInt! # uint256
  # blockGap: BigInt! # uint256
  # timeGap: BigInt! # uint256  
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
  eventType:String! # String open or increase
}

type DecreasePositionV2 @entity(immutable: true) {
  id: String!
  positionKey: String! #position key 
  orderKey: String #orderKey for v2
  # orderType: String! # order type market or limit 
  account: String! # address
  # path: [String!]! # address[]
  indexToken: String! # address
  marketToken: String! # address //new
  collateralToken: String! # address
  # amountIn: BigInt! # uint256 //collateral amount
  # minOut: BigInt! # uint256
  sizeDeltaInUsd: BigInt! # uint256
  sizeDeltaInToken: BigInt! # uint256
  sizeInUsd:BigInt!
  sizeInToken:BigInt!
  isLong: Boolean! # bool
  acceptablePrice: BigInt # uint256
  executionPrice: BigInt # uint256 //new
  indexTokenPriceMax: BigInt #new
  indexTokenPriceMin: BigInt #new
  collateralTokenPriceMin: BigInt #new
  collateralTokenPriceMax: BigInt #new
  executionFee: BigInt # uint256
  # blockGap: BigInt! # uint256
  # timeGap: BigInt! # uint256  


  priceImpactUsd: BigInt
  basePnlUsd: BigInt
  uncappedBasePnlUsd:BigInt

  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: String
  transactionIndex: BigInt
  logIndex: BigInt
  eventType: String # close or decrease
}

type PositionSlotV2 @entity {
  #basic info for position
  id: String!
  # idCount: Int!
  # link: PositionLink
  account: String!
  collateralToken: String!
  marketToken: String! #market token is token of market which is used to get the index token and other token
  indexToken: String!
  longToken:String!
  shortToken:String!
  isLong: Boolean!
  key: String!


  
  #averagePrice: BigInt!#there is no need of average price the profit calculation is based on size and every time we increase or decrease the position size in token change 
  # entryFundingRate: BigInt!
  # reserveAmount: BigInt!
  # realisedPnl: BigInt!
  cumulativeFee: BigInt!
  cumulativeSizeInUsd: BigInt!
  cumulativeSizeInToken: BigInt! #cumulative
  cumulativeCollateral: BigInt!
  collateralInUsd:BigInt!
  sizeInToken:BigInt!
  sizeInUsd:BigInt!
  maxSize: BigInt!
  maxCollateral: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  lastIncreasedTimestamp: BigInt!
  lastDecreasedTimestamp: BigInt!
  numberOfIncrease:BigInt!
  numberOfDecrease: BigInt!
  lastDecreasedIndexTokenPriceMin: BigInt!
  lastDecreasedIndexTokenPriceMax: BigInt!
  lastIncreasedIndexTokenPriceMin: BigInt!
  lastIncreasedIndexTokenPriceMax: BigInt!
  lastIncreasedCollateralTokenPriceMin: BigInt!
  lastIncreasedCollateralTokenPriceMax: BigInt!
  lastDecreasedCollateralTokenPriceMin: BigInt!
  lastDecreasedCollateralTokenPriceMax: BigInt


  #v2 specific Data
  priceImpactUsd: BigInt!
  basePnlUsd: BigInt!
  uncappedBasePnlUsd:BigInt!
  indexTokenPriceMax: BigInt!
  indexTokenPriceMin: BigInt!
  collateralTokenPriceMax: BigInt!
  collateralTokenPriceMin:BigInt!
  indexTokenOpenPriceMin: BigInt!
  indexTokenOpenPriceMax: BigInt!
  sizeUpdatedAt: BigInt!


  #fee related Data
  fundingFeeUsd: BigInt!
  positionFeeUsd: BigInt!
  borrowingFeeUsd: BigInt!
  feesUpdatedAt: BigInt!
  

}
type PositionSettledV2 @entity(immutable: true) {
  #basic info for position
  id: String!
  # idCount: Int!
  # link: PositionLink!
  account: String!
  collateralToken: String!
  marketToken: String! #market token is token of market which is used to get the index token and other token
  indexToken: String!
  longToken:String!
  shortToken:String!
  isLong: Boolean!
  key: String!


  
  #averagePrice: BigInt!#there is no need of average price the profit calculation is based on size and every time we increase or decrease the position size in token change 
  # entryFundingRate: BigInt!
  # reserveAmount: BigInt!
  # realisedPnl: BigInt!

  cumulativeSizeInUsd: BigInt!
  cumulativeSizeInToken: BigInt! #cumulative
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!
  sizeInUsd: BigInt!
  sizeInToken: BigInt!
  collateralInUsd: BigInt! #collateralAmount
  

  maxSize: BigInt!
  maxCollateral: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  lastIncreasedTimestamp: BigInt!
  lastDecreasedTimestamp: BigInt!
  numberOfIncrease:BigInt!
  numberOfDecrease: BigInt!
  lastDecreasedIndexTokenPriceMin: BigInt!
  lastDecreasedIndexTokenPriceMax: BigInt!
  lastIncreasedIndexTokenPriceMin: BigInt!
  lastIncreasedIndexTokenPriceMax: BigInt!
  lastIncreasedCollateralTokenPriceMin: BigInt!
  lastIncreasedCollateralTokenPriceMax: BigInt!
  lastDecreasedCollateralTokenPriceMin: BigInt!
  lastDecreasedCollateralTokenPriceMax: BigInt


  #v2 specific Data
  priceImpactUsd: BigInt
  basePnlUsd: BigInt
  uncappedBasePnlUsd:BigInt
  indexTokenPriceMax: BigInt
  indexTokenPriceMin: BigInt
  collateralTokenPriceMax: BigInt
  collateralTokenPriceMin:BigInt
  indexTokenOpenPriceMin: BigInt
  indexTokenOpenPriceMax: BigInt
  sizeUpdatedAt: BigInt


  #fee related Data
  fundingFeeUsd: BigInt
  positionFeeUsd: BigInt
  borrowingFeeUsd: BigInt
  feesUpdatedAt: BigInt
  

}
# type PositionSettledV2 @entity(immutable: true){

# }

# type DepositOrderCreatedV2 @entity(immutable: true){

# }

# type OrderCreated @entity(immutable: true){

# }

# type OrderCancled @entity(immutable: true){

# }

# type OrderUpdated @entity(immutable: true){

# }

# type Order @entity(immutable: true){
#   id: String!
# orderKey: String! #item zero is always order key in order related events

# #data from order created event 
# account: String!
# receiver: String!
# callbackContract: String!
# uiFeeReceiver: String!
# market: String!
# initialCollateralToken: String!
# #swap path from order created event
# # swapPath: String[]!
# orderType: BigInt!  # it is stored in the order contract there are types like market increase market decrease


# decreasePositionSwapType: BigInt #it is stored in the order contract
# sizeDeltaUsd: BigInt!
# initialCollateralDeltaAmount: BigInt!
# triggerPrice: BigInt!
# acceptablePrice: BigInt!
# executionFee: BigInt!
# callbackGasLimit: BigInt!
# minOutputAmount: BigInt!
# updatedAtBlock: BigInt! #updated at block

# isLong: Boolean!
# shouldUnwrapNativeToken: Boolean!
# #to-manage-state of contract 
# isExecuted:Boolean!
# isCancled: Boolean!
# isUpdated: Boolean!
# isOrderFrozen: Boolean!
# reason: String!
# }

# type AccountPerf @entity {
#   id: ID!
#   timestamp: Int!
#   period: Period!
#   account: String!
#   wins: BigInt!
#   losses: BigInt!
#   totalPnl: BigInt!
#   totalCollateral: BigInt!
#   maxCollateral: BigInt!
#   cumsumSize: BigInt!
#   cumsumCollateral: BigInt!
#   sumMaxSize: BigInt! # closed positions
#   closedCount: BigInt!
#   fundingFeeUsd: BigInt!
#   positionFeeUsd: BigInt!
#   borrowingFeeUsd: BigInt!
#   priceImpactUsd: BigInt!
# }

# type feeV2 @entity(immutable: true){

# }