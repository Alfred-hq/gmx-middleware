type ClosePosition @entity(immutable: true) {
  id: String!
  account: String!
  link: PositionLink!

  key: String! # String32
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  averagePrice: BigInt! # uint256
  entryFundingRate: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type DecreasePosition @entity(immutable: true) {
  id: String!
  key: String! # String32
  link: PositionLink!

  account: String! # address
  collateralToken: String! # address
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  price: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type IncreasePosition @entity(immutable: true) {
  id: String!
  key: String! # String32
  link: PositionLink!

  account: String! # address
  collateralToken: String! # address
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  price: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type UpdatePosition @entity(immutable: true) {
  id: String!
  account: String!
  link: PositionLink!

  key: String! # String32
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  averagePrice: BigInt! # uint256
  entryFundingRate: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  markPrice: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type LiquidatePosition @entity(immutable: true) {
  id: String!
  key: String! # String32
  link: PositionLink!

  account: String! # address
  collateralToken: String! # address
  indexToken: String! # address
  isLong: Boolean! # bool
  size: BigInt! # uint256
  collateral: BigInt! # uint256
  reserveAmount: BigInt! # uint256
  realisedPnl: BigInt! # int256
  markPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type Swap @entity(immutable: true) {
  id: String!
  account: String! # address
  tokenIn: String! # address
  tokenOut: String! # address
  amountIn: BigInt! # uint256
  amountOut: BigInt! # uint256
  amountOutAfterFees: BigInt! # uint256
  feeBasisPoints: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type ExecuteDecreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  receiver: String! # address
  acceptablePrice: BigInt! # uint256
  minOut: BigInt! # uint256
  executionFee: BigInt! # uint256
  blockGap: BigInt! # uint256
  timeGap: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type ExecuteIncreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  acceptablePrice: BigInt! # uint256
  executionFee: BigInt! # uint256
  blockGap: BigInt! # uint256
  timeGap: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type CreateDecreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  collateralDelta: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  receiver: String! # address
  acceptablePrice: BigInt! # uint256
  minOut: BigInt! # uint256
  executionFee: BigInt! # uint256
  index: BigInt! # uint256
  queueIndex: BigInt! # uint256
  blockTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type CreateIncreasePosition @entity(immutable: true) {
  id: String!
  account: String! # address
  path: [String!]! # address[]
  indexToken: String! # address
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  acceptablePrice: BigInt! # uint256
  executionFee: BigInt! # uint256
  index: BigInt! # uint256
  queueIndex: BigInt! # uint256
  blockTime: BigInt! # uint256
  gasPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

# slots
type PositionSlot @entity {
  id: String!
  idCount: Int!
  link: PositionLink!

  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!

  size: BigInt!
  collateral: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  lastIncreasedTimestamp: BigInt!
  lastDecreasedTimestamp: BigInt!
  numberOfIncrease: BigInt!
  numberOfDecrease: BigInt!
  lastDecreasedPrice: BigInt!
}

type PositionSettled @entity(immutable: true) {
  id: String!
  idCount: Int!
  link: PositionLink!

  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!

  size: BigInt!
  collateral: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!

  settlePrice: BigInt!
  isLiquidated: Boolean!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
  openTime: BigInt!
  closeTime: BigInt!
  numberOfIncrease: BigInt!
  numberOfDecrease: BigInt!
}

type PositionLink @entity(immutable: false) {
  id: String!

  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!

  # executeIncreaseList: [ExecuteIncreasePosition!] @derivedFrom(field: "link")
  # executeDecreaseList: [ExecuteDecreasePosition!] @derivedFrom(field: "link")

  increaseList: [IncreasePosition!] @derivedFrom(field: "link")
  decreaseList: [DecreasePosition!] @derivedFrom(field: "link")
  updateList: [UpdatePosition!] @derivedFrom(field: "link")
  closeList: [ClosePosition!] @derivedFrom(field: "link")

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!

  cumulativeSize: BigInt!
  cumulativeCollateral: BigInt!
  cumulativeFee: BigInt!

  maxSize: BigInt!
  maxCollateral: BigInt!

  settlePrice: BigInt!
  isLiquidated: Boolean!
  size: BigInt!
  collateral: BigInt!
}
type CancelDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CancelIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  purchaseToken: String! # address
  purchaseTokenAmount: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CancelSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CreateDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CreateIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  purchaseToken: String! # address
  purchaseTokenAmount: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type CreateSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type ExecuteDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  executionPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type ExecuteIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  purchaseToken: String! # address
  purchaseTokenAmount: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  executionFee: BigInt! # uint256
  executionPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type ExecuteSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  amountOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type Initialize @entity(immutable: true) {
  id: String!
  router: String! # address
  vault: String! # address
  weth: String! # address
  usdg: String! # address
  minExecutionFee: BigInt! # uint256
  minPurchaseTokenAmountUsd: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateDecreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  collateralDelta: BigInt! # uint256
  indexToken: String! # address
  sizeDelta: BigInt! # uint256
  isLong: Boolean! # bool
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateGov @entity(immutable: true) {
  id: String!
  gov: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateIncreaseOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  orderIndex: BigInt! # uint256
  collateralToken: String! # address
  indexToken: String! # address
  isLong: Boolean! # bool
  sizeDelta: BigInt! # uint256
  triggerPrice: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateMinExecutionFee @entity(immutable: true) {
  id: String!
  minExecutionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateMinPurchaseTokenAmountUsd @entity(immutable: true) {
  id: String!
  minPurchaseTokenAmountUsd: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type UpdateSwapOrder @entity(immutable: true) {
  id: String!
  account: String! # address
  ordexIndex: BigInt! # uint256
  path: [String!]! # address[]
  amountIn: BigInt! # uint256
  minOut: BigInt! # uint256
  triggerRatio: BigInt! # uint256
  triggerAboveThreshold: Boolean! # bool
  shouldUnwrap: Boolean! # bool
  executionFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
}

type Trades @entity(immutable: true) {
  id: String!
  link: PositionLink!
  key: String
  account: String
  status: String
  collateralToken: String
  indexToken: String
  collateral: BigInt
  collateralDelta: BigInt
  size: BigInt
  sizeDelta: BigInt!
  positionSide: String
  fee: BigInt
  price: BigInt
  averagePrice: BigInt
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: String
  logIndex: BigInt
  entryFundingRate: BigInt
  reserveAmount: BigInt
  realisedPnl: BigInt
}

type TraderAnalytics @entity(immutable: true) {
  id: String!
  account: String!
  cumulativeSize: BigInt!
  cumulativeFee: BigInt!
  cumulativeCollateral: BigInt!
  maxSize: BigInt!
  maxCollateral: BigInt!
  cumulativePnl: BigInt!
  openCount: BigInt!
  totalPositions: BigInt!
  increaseCount: BigInt!
  decreaseCount: BigInt!
  lastSettledPositionAt: BigInt!
  lastOpenPositionAt: BigInt!
  totalLiquidated: BigInt!
}

 type TraderAnalyticsDaily @entity(immutable: true) {
  id: String!
  account: String!
  cumulativeSize: BigInt!
  cumulativeFee: BigInt!
  cumulativeCollateral: BigInt!
  maxSize: BigInt!
  maxCollateral: BigInt!
  cumulativePnl: BigInt!
  openCount: BigInt!
  totalPositions: BigInt!
  increaseCount: BigInt!
  decreaseCount: BigInt!
  lastSettledPositionAt: BigInt!
  lastOpenPositionAt: BigInt!
  totalLiquidated: BigInt!
 }